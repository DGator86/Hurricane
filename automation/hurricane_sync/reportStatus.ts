/* eslint-disable no-console */
import fs from 'fs';
// import { runPaper } from '../../src/hurricane/pipeline/runPaper.js';

type HurricaneOutputs = {
  levels: { price: number; kind: 'support' | 'resistance'; score: number; sources: string[] }[];
  bias: { value: -1 | 0 | 1; confidence: number; evidence: string[] };
  speed: { label: 'calm' | 'normal' | 'breezy' | 'storm'; drivers: string[] };
  diagnostics: { gamma_sign: 'short' | 'long' | 'mixed'; dix_trend: 'up' | 'down' | 'flat'; vol_regime: 'low' | 'mid' | 'high' };
};

async function mockRun(): Promise<HurricaneOutputs> {
  return {
    levels: [
      { price: 435, kind: 'support', score: 0.78, sources: ['gex_density', 'gex_gradient', 'dark_pool'] },
      { price: 440, kind: 'resistance', score: 0.72, sources: ['gex_density', 'volume_shelf'] },
    ],
    bias: { value: 1, confidence: 0.62, evidence: ['gamma:short', 'dix:up'] },
    speed: { label: 'breezy', drivers: ['rv_ratio:1.35', 'vix:17.8', 'dvol:9.2B'] },
    diagnostics: { gamma_sign: 'short', dix_trend: 'up', vol_regime: 'mid' },
  };
}

(async () => {
  const outputs /* = await runPaper({ asOf: new Date().toISOString() }) */ = await mockRun();

  const lvlTable = outputs.levels
    .sort((a, b) => a.price - b.price)
    .map((level) => `| ${level.price.toFixed(2)} | ${level.kind} | ${(level.score * 100).toFixed(0)}% | ${level.sources.join(', ')} |`)
    .join('\n');

  const score = Math.round(50
    + ((outputs.bias.confidence - 0.5) * 50)
    + ((outputs.levels.reduce((sum, level) => sum + level.score, 0) / Math.max(outputs.levels.length, 1)) * 20)
    + (outputs.speed.label === 'calm' ? -5 : outputs.speed.label === 'storm' ? -10 : 0));

  const markdown = `# Hurricane Codex — Repo Status\n\n**Date:** ${new Date().toISOString()}\n\n## Signal Snapshot\n- **Bias:** ${outputs.bias.value === 1 ? 'Long' : outputs.bias.value === -1 ? 'Short' : 'Neutral'} (${(outputs.bias.confidence * 100).toFixed(0)}%)\n- **Speed:** ${outputs.speed.label}  \`${outputs.speed.drivers.join(', ')}\`\n- **Gamma sign:** ${outputs.diagnostics.gamma_sign}, **DIX trend:** ${outputs.diagnostics.dix_trend}\n\n## Levels\n| Price | Kind | Strength | Sources |\n|---:|:--|:--:|:--|\n${lvlTable || '_none_'}\n\n## Health Score\n**${score}/100**  \n_(70–85 = healthy, 55–70 = needs tuning, <55 = fix soon)_\n\n> This comment is auto-generated by \`automation/hurricane_sync/reportStatus.ts\`. Wire it to real data by replacing \`mockRun()\` with your \`runPaper()\`.\n`;

  fs.writeFileSync('hurricane-status.md', markdown);
  console.log(markdown);
})();
